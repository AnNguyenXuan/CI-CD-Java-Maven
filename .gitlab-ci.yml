stages:  
  - build  
  - deploy 
  - showlog

variables:
  DOCKER_USER : $docker_user
  DOCKER_PASS : $docker_password
  IMAGE_NAME : ${DOCKER_USER}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}_${CI_COMMIT_TAG}
  CONTAINER_NAME: "shoeshop"
build:  
  stage: build  
  variables:
    GIT_STRATEGY: clone  # Bước build cần clone code
  before_script:
    - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
  script:  
    - docker build -t $IMAGE_NAME .
    - docker push $IMAGE_NAME
  # artifacts:
  #   paths:
  #     - target/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar  # Lưu JAR để dùng trong deploy
  tags:
    - ubuntu-server
  only:
    - tags

deploy:  
  stage: deploy  
  variables:
    GIT_STRATEGY: none  # Bước build cần clone code
  before_script:
    - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
  # dependencies: 
  #   - build  # Chỉ nhận file từ build, không tải lại code từ repo
  script: 
    - docker  pull $IMAGE_NAME
    - docker stop $CONTAINER_NAME || true
    - docker rm $CONTAINER_NAME || true
    - docker run -d --name $CONTAINER_NAME -p 7777:8080 $IMAGE_NAME
    # - ls -l target/  # Kiểm tra file
    # - kill -9 $(ps -ef | grep "shoe-ShoppingCart-0.0.1-SNAPSHOT.jar" | grep -v grep | awk '{print $2}')
    # - nohup java -jar target/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
  tags:
    - ubuntu-server
  only:
    - tags
showlog:
  stage: showlog
  variables:
    GIT_STRATEGY: none
  script:  
    - docker logs --tail 1000 $CONTAINER_NAME
  tags:
    - ubuntu-server
  only:
    - tags
